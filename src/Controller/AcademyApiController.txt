namespace App\Controller;

use App\Entity\Academy;
use App\Form\AcademyType;
use App\Repository\AcademyRepository;
use App\Repository\CoachRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/academyApi')]
class AcademyApiController extends AbstractController
{
    #[Route('/', name: 'app_academy_index', methods: ['GET'])]
    public function index(AcademyRepository $academyRepository): JsonResponse
    {
        $academies = $academyRepository->findAll();
        return $this->json($academies);
    }

    #[Route('/client', name: 'app_academy_client', methods: ['GET'])]
    public function client(AcademyRepository $academyRepository): JsonResponse
    {
        $academies = $academyRepository->findAll();
        return $this->json($academies);
    }

    #[Route('/new', name: 'app_academy_new', methods: ['POST'])]
    public function new(Request $request, AcademyRepository $academyRepository): JsonResponse
    {
        $data = json_decode($request->getContent(), true);

        $academy = new Academy();
        $form = $this->createForm(AcademyType::class, $academy);
        $form->submit($data);

        if ($form->isSubmitted() && $form->isValid()) {
            $academyRepository->save($academy, true);
            return $this->json($academy);
        }

        return $this->json($form->getErrors(true, true), Response::HTTP_BAD_REQUEST);
    }

    #[Route('/{id}', name: 'app_academy_show', methods: ['GET'])]
    public function show(Academy $academy,CoachRepository $CoachRepository): JsonResponse
    {
        $coaches = $CoachRepository->findBy(['academyId' => $academy]);
        $academyData = [
            'id' => $academy->getId(),
            'name' => $academy->getName(),
            'description' => $academy->getDescription(),
            'address' => $academy->getAddress(),
            'city' => $academy->getCity(),
            'state' => $academy->getState(),
            'country' => $academy->getCountry(),
            'coaches' => $coaches
        ];
        return $this->json($academyData);
    }

    #[Route('/{id}/client', name: 'app_academy_show_client', methods: ['GET'])]
    public function show_client(Academy $academy,CoachRepository $CoachRepository): JsonResponse
    {
        $coaches = $CoachRepository->findBy(['academyId' => $academy]);
        $academyData = [
            'id' => $academy->getId
